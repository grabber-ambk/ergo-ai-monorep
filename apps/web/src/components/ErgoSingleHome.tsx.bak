"use client"

import { useState, useEffect } from 'react';
import { ChevronDown, Globe, Search, Settings, Plus } from 'lucide-react';
import { useTranslation } from "@ergo-ai/i18n/src/client";
import { useFileUpload } from "@ergo-ai/hooks/src/useFileUpload";

// Import the extracted components
import SignupMultiStepModal from "@/components/SignupMultiStepModal";
import LoginModal from "@/components/LoginModal";
import UploadStage from "@/components/UploadStage";
import QuoteConfirm from "@/components/QuoteConfirm";
import QuoteResult from "@/components/QuoteResult";
import PreviousQuotes from "@/components/PreviousQuotes";
import SearchIntegration from "@/components/SearchIntegration";

import UploadStageUpdated from "@/components/UploadStageUpdated";
import SearchResults from "@/components/SearchResults";
import {useLocale} from "@/components/localeProvider";

const formatDateToBR = (date: Date): string => {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
};

// Adicione a função para calcular data final baseada na data inicial + dias
const calculateEndDate = (startDate: string, days: number): string => {
    const [day, month, year] = startDate.split('/').map(Number);
    const date = new Date(year, month - 1, day);
    date.setDate(date.getDate() + days);
    return formatDateToBR(date);
};




const ErgoSingleHome = () => {
    const { t, i18n } = useTranslation();
    const locale = i18n.language; // Carrega as traduções do namespace 'signup'
    const [sidebarOpen, setSidebarOpen] = useState(true);
    const [activeTab, setActiveTab] = useState('simple');
    const [showLoginModal, setShowLoginModal] = useState(false);
    const [showSignupModal, setShowSignupModal] = useState(false);
    const [selectedCountry, setSelectedCountry] = useState('BR');

    const [quoteStage, setQuoteStage] = useState<'upload' | 'confirm' | 'result'>('upload');
    const [quoteData, setQuoteData] = useState<any>(null);
    const [uploadedFilename, setUploadedFilename] = useState('');
    const [fileSize, setFileSize] = useState('');
    const [fileUploaded, setFileUploaded] = useState(false);

    // Obter a data atual formatada
    const today = formatDateToBR(new Date());
    const defaultDays = 365;
    const defaultEndDate = calculateEndDate(today, defaultDays);

    // Mock previous quotes
    const mockPreviousQuotesData = [
        { id: '1', company: '3S SUPERMERCADO LTDA', date: '20/04/2025', value: 200050.00 },
        { id: '2', company: 'TECH SOLUTIONS SA', date: '15/04/2025', value: 150000.00 },
        { id: '3', company: 'CONSTRUÇÕES SILVA LTDA', date: '10/04/2025', value: 500000.00 }
    ];

    // Signup form data
    const [signupFormData, setSignupFormData] = useState({
        companyName: '',
        fullName: '',
        taxId: '',
        email: '',
        phone: '+55'
    });

    // Advanced form state com valores iniciais dinâmicos
    const [advancedFormData, setAdvancedFormData] = useState({
        modalidade: '',
        startDate: today,
        endDate: defaultEndDate,
        days: defaultDays.toString(),
        guaranteeValue: 'R$ 0,00',  // Valor zerado
        currency: 'BRL',
        comissaoCorretorValue: 'R$ 0,00',
        comissaoCorretorPercentage: '20,00%',
        comissaoAgravada: 'R$ 0,00',
        taxa: '5,00%'
    });

    // Dados simulados da cotação
    const mockQuoteData = {
        borrower: {
            name: "3S SUPERMERCADO LTDA",
            taxId: "46.189.831/0001-54",
            address: "AVENIDA DOUTOR GENTIL DE MOURA, N.º 370, BOX 03, BAIRRO IPIRANGA",
            zipCode: "04.208-053",
            city: "SÃO PAULO",
            state: "SP",
            email: "3ssupermercado@gmail.com"
        },
        beneficiary: {
            name: "DIA BRASIL SOCIEDADE LIMITADA EM RECUPERAÇÃO JUDICIAL",
            taxId: "03.476.811/0001-51",
            address: "AV IBIRAPUERA, N.º 2.332, BLOCO I - TORRES IBIRAPUERA I, 14º ANDAR, INDIANÓPOLIS",
            zipCode: "04028-900",
            city: "SÃO PAULO",
            state: "SP"
        },
        guarantee: {
            type: "GARANTIA FINANCEIRA",
            coverage: "GARANTIA DE PAGAMENTO",
            value: 200050.00,
            startDate: "29/04/2025",
            endDate: "29/04/2026",
            days: 365,
            reference: "903032025DBSL3SAL1",
            proposal: "ICSMCP903032025",
            purpose: "Garantia total as obrigações assumidas no Contrato de Franquia e contratos acessórios firmados entre as partes."
        },
        premium: 10002.50
    };

    // Effect to show login modal after 30 seconds
    useEffect(() => {
        const loginTimer = setTimeout(() => {
            setShowLoginModal(true);
        }, 30000); // 30 segundos

        return () => clearTimeout(loginTimer);
    }, []);

    const {
        handleFileSelect,
        resetUpload,
    } = useFileUpload();

    // Toggle sidebar function
    const toggleSidebar = () => {
        setSidebarOpen(!sidebarOpen);
    };

    // Handle tab change
    const handleTabChange = (tab: string) => {
        setActiveTab(tab);
    };

    // Signup modal handlers
    const handleOpenSignupModal = () => {
        setShowSignupModal(true);
    };

    const handleCloseSignupModal = () => {
        setShowSignupModal(false);
    };

    // Handle country change
    const handleCountryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
        const country = e.target.value;
        setSelectedCountry(country);

        // Reset tax ID field when changing country
        setSignupFormData({
            ...signupFormData,
            taxId: '',
            phone: country === 'BR' ? '+55' : '+1' // Simple example - adjust as needed
        });
    };

    // Handle signup form changes
    const handleSignupFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setSignupFormData({
            ...signupFormData,
            [name]: value
        });
    };

    // Process signup form submission
    const handleSignupSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        console.log('Signup data:', signupFormData);
        // Process signup logic here

        // No final, feche o modal
        setTimeout(() => {
            handleCloseSignupModal();
        }, 1000);
    };

    // Handle advanced form input changes
    const handleAdvancedFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const name = e.target.name;
        const value = e.target.value;

        // Log para debug
        console.log('ErgoSingleHome recebeu alteração:', name, value);

        // Verificar se o nome do campo está definido
        if (!name) {
            console.error('Campo sem nome definido:', e);
            return; // Não processar eventos sem nome de campo
        }

        // Caso especial para campos que precisam atualizar outros campos
        if (name === 'startDate') {
            // Quando a data inicial é alterada, recalcular a data final
            const newEndDate = calculateEndDate(value, parseInt(advancedFormData.days, 10));
            setAdvancedFormData(prev => ({
                ...prev,
                [name]: value,
                endDate: newEndDate
            }));
        }
        else if (name === 'days') {
            // Quando os dias são alterados, recalcular a data final
            const days = parseInt(value, 10) || 0;
            const newEndDate = calculateEndDate(advancedFormData.startDate, days);
            setAdvancedFormData(prev => ({
                ...prev,
                [name]: value,
                endDate: newEndDate
            }));
        }
        else if (name === 'endDate') {
            // Quando a data final é alterada, recalcular os dias
            try {
                const [startDay, startMonth, startYear] = advancedFormData.startDate.split('/').map(Number);
                const [endDay, endMonth, endYear] = value.split('/').map(Number);

                const startDate = new Date(startYear, startMonth - 1, startDay);
                const endDate = new Date(endYear, endMonth - 1, endDay);

                const diffTime = Math.abs(endDate.getTime() - startDate.getTime());
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                setAdvancedFormData(prev => ({
                    ...prev,
                    [name]: value,
                    days: diffDays.toString()
                }));
            } catch (error) {
                console.error('Erro ao calcular a diferença de dias:', error);
                // Apenas atualiza a data final sem recalcular os dias em caso de erro
                setAdvancedFormData(prev => ({
                    ...prev,
                    [name]: value
                }));
            }
        }
        else if (name === 'currency') {
            // Quando a moeda mudar, precisamos reformatar o valor de garantia
            const newCurrency = value;
            const currentValue = advancedFormData.guaranteeValue;

            // Extrair o valor numérico da string formatada atual
            // Remover todos os caracteres não numéricos exceto ponto e vírgula
            let numericString = currentValue.replace(/[^\d,.]/g, '');

            // Adaptar o parsing com base na moeda atual
            const currentCurrency = advancedFormData.currency;
            let numericValue;

            if (currentCurrency === 'BRL' || currentCurrency === 'EUR') {
                // Para formatos com vírgula como separador decimal
                numericValue = parseFloat(numericString.replace(/\./g, '').replace(',', '.'));
            } else {
                // Para formatos com ponto como separador decimal
                numericValue = parseFloat(numericString.replace(/,/g, ''));
            }

            if (isNaN(numericValue)) numericValue = 0;

            // Configurações para cada moeda
            const currencySettings = {
                'BRL': { symbol: 'R$ ', locale: 'pt-BR', decimalSeparator: ',', thousandSeparator: '.' },
                'USD': { symbol: '$ ', locale: 'en-US', decimalSeparator: '.', thousandSeparator: ',' },
                'EUR': { symbol: '€ ', locale: 'de-DE', decimalSeparator: ',', thousandSeparator: '.' },
                'GBP': { symbol: '£ ', locale: 'en-GB', decimalSeparator: '.', thousandSeparator: ',' }
            };

            // Obter as configurações da nova moeda
            const settings = currencySettings[newCurrency] || currencySettings['BRL'];

            // Formatar o valor para a nova moeda
            const formattedValue = settings.symbol + numericValue.toLocaleString(settings.locale, {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });

            // Atualizar o estado com a nova moeda e o valor reformatado
            setAdvancedFormData(prev => ({
                ...prev,
                currency: newCurrency,
                guaranteeValue: formattedValue
            }));
        }
        else if (name === 'guaranteeValue') {
            // Tratamento especial para o valor de garantia
            try {
                // Obter a moeda atual
                const currentCurrency = advancedFormData.currency;

                // Configurações para cada moeda
                const currencySettings = {
                    'BRL': { symbol: 'R$ ', locale: 'pt-BR', decimalSeparator: ',', thousandSeparator: '.' },
                    'USD': { symbol: '$ ', locale: 'en-US', decimalSeparator: '.', thousandSeparator: ',' },
                    'EUR': { symbol: '€ ', locale: 'de-DE', decimalSeparator: ',', thousandSeparator: '.' },
                    'GBP': { symbol: '£ ', locale: 'en-GB', decimalSeparator: '.', thousandSeparator: ',' }
                };

                // Usar as configurações da moeda atual ou padrão para BRL
                const settings = currencySettings[currentCurrency] || currencySettings['BRL'];

                // Verificar se temos um valor formatado completo
                if (value.includes(settings.symbol)) {
                    // Já está formatado como moeda, aceitar como está
                    setAdvancedFormData(prev => ({
                        ...prev,
                        guaranteeValue: value
                    }));
                    console.log('Valor já formatado aceito:', value);
                    return;
                }

                // Remover qualquer símbolo de moeda e espaços
                let cleanValue = value.replace(/[^\d,.]/g, '');

                // Se vazio, definir como zero
                if (!cleanValue) cleanValue = '0';

                // Adaptar o valor para o formato numérico correto com base na moeda
                let numericValue;

                if (settings.decimalSeparator === ',') {
                    // Para formatos europeus/brasileiros (1.234,56)
                    numericValue = cleanValue.replace(/\./g, '').replace(',', '.');
                } else {
                    // Para formatos americanos/britânicos (1,234.56)
                    numericValue = cleanValue.replace(/,/g, '');
                }

                // Se for vazio ou não numérico, definir como zero
                if (!numericValue || isNaN(parseFloat(numericValue))) {
                    numericValue = '0';
                }

                // Converter para número
                const amount = parseFloat(numericValue);

                // Formatar o valor de acordo com o locale da moeda
                const formattedValue = settings.symbol + amount.toLocaleString(settings.locale, {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });

                console.log('ErgoSingleHome - valor formatado para moeda:', currentCurrency, formattedValue);

                setAdvancedFormData(prev => ({
                    ...prev,
                    guaranteeValue: formattedValue
                }));
            } catch (error) {
                console.error('Erro ao formatar valor de garantia:', error);
                // Em caso de erro, manter o valor atual
                setAdvancedFormData(prev => ({
                    ...prev
                }));
            }
        }

        console.log('Estado do formulário atualizado:', name, value);
    };

    // Simulate file upload
    const handleFileSelected = (e: React.ChangeEvent<HTMLInputElement>) => {
        const filename = 'SEI_64182677_Oficio_121.pdf';
        setUploadedFilename(filename);
        setFileSize('49 KB');
        setFileUploaded(true);

        // Optionally set the actual file if it exists
        if (e?.target?.files?.[0]) {
            handleFileSelect(e.target.files[0]);
        }
    };

    // Generate quote (after file upload)
    const handleGenerateQuote = () => {
        console.log("Generating quote...");
        setQuoteData(mockQuoteData);
        setQuoteStage('confirm');
    };

    // Generate quote from advanced form
    const handleGenerateAdvancedQuote = () => {
        console.log("Generating quote from advanced form...");
        // Process advanced form data
        setQuoteData(mockQuoteData);
        setQuoteStage('confirm');
    };

    // Confirm quote
    const handleConfirmQuote = () => {
        console.log("Confirming quote...");
        setQuoteStage('result');
    };

    // Start new quote
    const handleNewQuote = () => {
        resetUpload();
        setUploadedFilename('');
        setFileSize('');
        setFileUploaded(false);
        setQuoteData(null);
        setQuoteStage('upload');
        setActiveTab('simple');
    };

    // Select a quote from previous quotes
    const handleSelectQuote = async (quoteId: string) => {
        try {
            // In a real app, this would fetch the quote from the API
            console.log(`Selected quote with ID: ${quoteId}`);
            setQuoteData(mockQuoteData);
            setQuoteStage('result');
        } catch (error) {
            console.error('Error fetching quote details:', error);
            alert('Failed to load quote details. Please try again.');
        }
    };

    // Change language
    const changeLanguage = (newLocale: string) => {
        // Mudar o idioma via i18n sem recarregar a página
        i18n.changeLanguage(newLocale);

        // Atualizar a URL sem recarregar a página usando history.pushState
        const path = window.location.pathname;
        const currentLocalePath = path.split('/')[1];

        // Verificar se o caminho atual já contém um locale
        if (['pt', 'en', 'es'].includes(currentLocalePath)) {
            const newPath = path.replace(`/${currentLocalePath}`, `/${newLocale}`);
            window.history.pushState(null, '', newPath);
        } else {
            window.history.pushState(null, '', `/${newLocale}${path}`);
        }

        console.log(`Idioma alterado para ${newLocale} sem recarregar a página`);
    };

    // Language selector component
    const LanguageSelector = () => {
        // Forçar o uso direto do i18n.language em vez de locale do useLocale
        // Isso garante que estamos sempre mostrando o idioma atual do sistema i18n

        const getCurrentLanguageName = () => {
            const currentLanguage = i18n.language;
            switch(currentLanguage) {
                case 'pt': return 'Português';
                case 'en': return 'English';
                case 'es': return 'Español';
                default: return 'Português';
            }
        };

        return (
            <div className="flex items-center">
                <Globe size={18} className="text-gray-500 mr-1" />
                <div className="relative inline-block text-left">
                    <div>
                        <button type="button"
                                className="inline-flex items-center gap-x-1 text-sm font-semibold"
                                onClick={() => {
                                    // Lista simples de idiomas para alternar
                                    const languages = ['pt', 'en', 'es'];
                                    const currentIndex = languages.indexOf(i18n.language);
                                    const nextIndex = (currentIndex + 1) % languages.length;
                                    const nextLanguage = languages[nextIndex];

                                    // Mudar idioma usando i18n diretamente
                                    i18n.changeLanguage(nextLanguage);

                                    // Atualizar URL
                                    const path = window.location.pathname;
                                    const currentLocalePath = path.split('/')[1];

                                    if (['pt', 'en', 'es'].includes(currentLocalePath)) {
                                        const newPath = path.replace(`/${currentLocalePath}`, `/${nextLanguage}`);
                                        window.history.pushState(null, '', newPath);
                                    } else {
                                        window.history.pushState(null, '', `/${nextLanguage}${path}`);
                                    }

                                    console.log(`Idioma alterado para ${nextLanguage}`);
                                }}
                        >
                            {getCurrentLanguageName()}
                            <ChevronDown size={14} className="text-gray-400" aria-hidden="true" />
                        </button>
                    </div>
                </div>
            </div>
        );
    };

    return (
        <div className="flex h-screen overflow-hidden bg-gray-50">
            {/* Modals */}
            {showLoginModal && (
                <LoginModal
                    isOpen={showLoginModal}
                    onClose={() => setShowLoginModal(false)}
                    onSignup={handleOpenSignupModal}
                />
            )}

            {/* Multi-step Signup Modal - Nova Implementação */}
            {showSignupModal && (
                <SignupMultiStepModal
                    isOpen={showSignupModal}
                    onClose={handleCloseSignupModal}
                    signupFormData={signupFormData}
                    selectedCountry={selectedCountry}
                    onCountryChange={handleCountryChange}
                    onSignupFormChange={handleSignupFormChange}
                    onSignupSubmit={handleSignupSubmit}
                />
            )}

            {/* Left Sidebar */}
            <div className={`${sidebarOpen ? 'w-64' : 'w-0'} bg-white border-r border-gray-200 flex flex-col transition-all duration-300 overflow-hidden`}>
                {/* Logo */}
                <div className="p-4 flex items-center h-16">
                    <div className="text-blue-600 font-bold text-xl">ERGO.AI</div>
                </div>

                {/* Create Quote Button */}
                <div className="px-4 mb-6">
                    <button
                        onClick={handleNewQuote}
                        className="bg-indigo-600 text-white rounded-lg py-2.5 px-4 w-full flex items-center justify-center hover:bg-indigo-700 transition-colors"
                    >
                        <Plus size={18} className="mr-2" />
                        <span>Criar Nova Cotação</span>
                    </button>
                </div>

                {/* Previous Quotes */}
                <div className="px-4 flex-1 overflow-y-auto">
                    <div className="font-semibold text-gray-900 mb-4">Cotações Anteriores</div>
                    <PreviousQuotes
                        quotes={mockPreviousQuotesData}
                        onSelectQuote={handleSelectQuote}
                    />
                </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex flex-col overflow-hidden">
                {/* Header */}
                <header className="h-16 bg-white border-b border-gray-200 px-4 flex items-center justify-between shadow-sm">
                    {/* Left side with menu toggle and optional logo */}
                    <div className="flex items-center">
                        <button
                            className="text-gray-500 hover:bg-gray-100 p-2 rounded-md"
                            onClick={toggleSidebar}
                        >
                            <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                            </svg>
                        </button>

                        {/* Show logo when sidebar is closed */}
                        {!sidebarOpen && (
                            <div className="text-blue-600 font-bold text-xl ml-2">ERGO.AI</div>
                        )}
                    </div>

                    {/* Search bar */}
                    <SearchIntegration
                        onSelectQuote={(quoteData) => {
                            setQuoteData(quoteData);
                            setQuoteStage('result');
                        }}
                    />

                    {/* Right side actions */}
                    <div className="flex items-center space-x-4">
                        <button className="text-gray-500 hover:bg-gray-100 p-2 rounded-full">
                            <Settings size={18} />
                        </button>

                        <LanguageSelector />

                        <div className="flex items-center">
                            <div className="w-8 h-8 rounded-full bg-indigo-700 text-white flex items-center justify-center">
                                M
                            </div>
                            <div className="ml-2 hidden md:block">
                                <div className="text-sm font-medium">Convidado</div>
                                <div className="text-xs text-gray-500">Usuário Web</div>
                            </div>
                            <ChevronDown size={14} className="ml-1 text-gray-400" />
                        </div>
                    </div>
                </header>

                {/* Main Content Area */}
                <main className="flex-1 overflow-auto p-6">
                    <div className="mb-6 flex items-center justify-between">
                        <h1 className="text-xl font-semibold text-gray-900">SIMULADO GARANTIA</h1>
                        <div className="flex items-center">
                            <button className="text-gray-500 p-2 hover:bg-gray-100 rounded-full">
                                <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                </svg>
                            </button>
                        </div>
                    </div>

                    {/* Main content container */}
                    <div className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden h-[calc(100vh-180px)]">
                        {/* Quote content based on stage */}
                        {quoteStage === 'upload' && (
                            <UploadStageUpdated
                                activeTab={activeTab}
                                handleTabChange={handleTabChange}
                                fileUploaded={fileUploaded}
                                uploadedFilename={uploadedFilename}
                                fileSize={fileSize}
                                advancedFormData={advancedFormData}
                                handleAdvancedFormChange={handleAdvancedFormChange}
                                handleFileSelected={handleFileSelected}
                                handleGenerateQuote={handleGenerateQuote}
                                handleGenerateAdvancedQuote={handleGenerateAdvancedQuote}
                            />
                        )}

                        {quoteStage === 'confirm' && (
                            <QuoteConfirm
                                quoteData={quoteData}
                                handleNewQuote={handleNewQuote}
                                handleConfirmQuote={handleConfirmQuote}
                            />
                        )}

                        {quoteStage === 'result' && (
                            <QuoteResult
                                quoteData={quoteData}
                                handleNewQuote={handleNewQuote}
                                handleOpenSignupModal={handleOpenSignupModal}
                            />
                        )}
                    </div>
                </main>
            </div>
        </div>
    );
};

export default ErgoSingleHome;
