'use client'

import React, {createContext, useCallback, useContext, useEffect, useMemo, useState} from 'react'
import { usePathname, useRouter } from 'next/navigation'
import {locales} from "@ergo-ai/i18n/src/settings";

// Define as línguas suportadas
const supportedLocales = ['pt', 'en', 'es']
const defaultLocale = 'pt'

// Cria o contexto
type LocaleContextType = {
    locale: string
    setLocale: (locale: string) => void
    preventNavigation?: boolean  // Novo parâmetro para prevenir navegação
}

const LocaleContext = createContext<LocaleContextType>({
    locale: defaultLocale,
    setLocale: () => {},
    preventNavigation: false
})

// Hook para usar o contexto
export const useLocale = () => useContext(LocaleContext)

// Componente HTML que manipula o idioma
export function LocaleHtmlAttributes({ children }: { children: React.ReactNode }) {
    const { locale } = useLocale()

    // Define o atributo lang no html
    useEffect(() => {
        if (typeof document !== 'undefined') {
            document.documentElement.lang = locale
        }
    }, [locale])

    return <>{children}</>
}

// Provider do contexto
export function LocaleProvider({
                                   children,
                                   preventNavigation = false
                               }: {
    children: React.ReactNode;
    preventNavigation?: boolean;
}) {
    const [locale, setLocale] = useState(defaultLocale);

    // Adicionar essa lógica para gerenciar a mudança de idioma sem recarregar a página
    const changeLocale = useCallback((newLocale: string) => {
        if (locales.includes(newLocale)) {
            setLocale(newLocale);

            // Se preventNavigation for true, não redirecionamos
            if (!preventNavigation) {
                const path = window.location.pathname;
                const currentLocale = path.split('/')[1];

                if (locales.includes(currentLocale)) {
                    const newPath = path.replace(`/${currentLocale}`, `/${newLocale}`);
                    window.history.pushState(null, '', newPath);
                } else {
                    window.history.pushState(null, '', `/${newLocale}${path}`);
                }
            }
        }
    }, [preventNavigation]);

    // Valor do contexto
    const contextValue = useMemo(() => ({
        locale,
        setLocale: changeLocale
    }), [locale, changeLocale]);

    return (
        <LocaleContext.Provider value={contextValue}>
            {children}
        </LocaleContext.Provider>
    );
}
